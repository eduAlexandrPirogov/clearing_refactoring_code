Language cpp

Все методы проверялись через программу SourceMonitor.
Во время снижения ЦС, старался не писать решения с нуля, а исправлять уже имеющийся код, ориентируясь на имеющиеся тесты.
-------------------------FIRST EXAMPLE-------------------------
Language cpp

-------------BEFORE REFACTOR:
Как проблемы у данного кода:
1) Отсутствие DRY
2) Нарушение SRP
3) Наличие if-else
4) Наличие for
5) Неиспользуемые переменные
6) Сложность 8

-------------Code
void Json::convert(std::string& value)
{
    size_t end = value.size();
    size_t start = 0;
    size_t next = 0;
    std::string line;
    
    std::set<std::string> lines{};
    std::stringstream ss(value);
    while (std::getline(ss, line, ',')) {
        std::string s2(line);
        line.erase(remove(line.begin(), line.end(), '\"'), line.end());
        line.erase(remove(line.begin(), line.end(), '{'), line.end());
        line.erase(remove(line.begin(), line.end(), '}'), line.end());
        line.erase(remove(line.begin(), line.end(), ' '), line.end());

        else if (start == std::string::npos){
            if(line != "")
                lines.insert(line);
        }
    }

    std::vector<std::string> keyWithoutNestedValue{};
    std::vector<std::string> keysWithValue{};
    for (auto& val : lines)
    {
        std::string str = val;
        std::string delim{ ":" };

        std::string key = str.substr(0, str.find(delim));
        key.erase(remove(key.begin(), key.end(), '\"'), key.end());

        std::string val = str.substr(str.find(delim) + 1);
        val.erase(remove(val.begin(), val.end(), '\"'), val.end());

        std::pair<std::string, std::string> par(key, val);

       /* auto it = json_doc->find("_id");
        json_doc->erase(it, json_doc->end());*/
        json_doc->insert(par);
    }
    if (!with_id)
    {
        auto it = json_doc->find("_id");
        json_doc->erase(it, json_doc->end());
    }
    else {
        auto it = json_doc->find("_id");
        std::string val = it->second;
        json_doc->erase(it);
        std::pair<std::string, std::string> par(to_replace, val);

        json_doc->insert(par);
    }
    setSchema();
}


-------------AFTER REFACTOR
Что было сделано:

1) Все манипуляции со строками вынесены в отдельный класс StringFormater(Ясный код, обернул примитивный тип в класс)
Код упрощенного класса StringFormater: 
2) json_doc до рефактора был обычным полем map<string, string> в классе Json. Также обернул данный тип в класс (Ясный код).
3) Избавился от if-else с помощью тернарного оператора. (ЦС, избавление от else).
4) Избавился от for statemnt, использвал стандартную библиотеку (ЦС, избавление от for)/
5) Сложность снизилась с 8 до 2


Какие минусы имеются:
1) Наличие вложенного if в StringFormater::formatString
2) Наличие литералов вместо констант

-------------Code
void Json::convert(std::string& value)
{
    std::set<std::string> lines = formater->formatString(value); //class  StringFormater

    std::for_each(lines.begin(), lines.end(), [&](std::string& line)->void
        {
            auto pair = formater->splitString(line, ":");
            json_doc->insert(pair);
        });

    with_id ? json_doc->eraseId("_id") : json_doc->eraseId("_id", to_replace);

    setSchema();
}

//Класс Format
std::set<std::string>& StringFormater::formatString(std::string& json)
{
    std::set<std::string> lines;
    std::stringstream ss(json);
    std::string line;
    while (std::getline(ss, line, ',')) {
        std::string s2(line);
        eraseElems(line);
        size_t start = s2.find("[");
        if (start == std::string::npos) {
            if (line != "")
                lines.insert(line);
        }
    }

    return lines;
}

std::pair<std::string, std::string> splitString(std::string& to_split, const std::string& delim)
{
    std::string key = to_split.substr(0, to_split.find(delim));
    std::string value = to_split.substr(to_split.find(delim) + 1);
    std::pair<std::string, std::string> par(key, value);
    return par;
}


-------------------------SECOND EXAMPLE-------------------------
Language cpp

-------------BEFORE REFACTOR:

Какие проблемы у данного кода:
1) Отсутствие SRP
2) Наличие if-else
3) Наличие for и вложенных if-else
4) Использование for с массивом -- возможность выйти за границы
5) Плохие имена у переменных
6) Передаются мутабельные значения query, collection в параметрах метода
7) ЦС метода find равно 7

Данный метод реализует добавление елемента в отсортированных список. 
-------------Code
void MongoWrapper::find(MongoSelectQuery& query, std::string& collection)
{
	MongoWrapper::query_result.clear();

	mongocxx::collection coll = MongoWrapper::db[collection];
	document doc{};

	auto filters = query.getWhere();
	short filters_size = filters.size();

	for (short i = 0; i < filters_size; i++)
	{
		doc << filters[i]->getFirst() << open_document;
		double val = MongoWrapper::convert_to_double(filters[i]->getSecond());
		if (val != -1.0)
			doc << filters[i]->getWhereOperator() << val;
		else
			doc << filters[i]->getWhereOperator() << filters[i]->getSecond();
		doc << close_document;
	}

	std::vector<MongoOrderParam*> orders = query.getOrderField();
	std::vector<MongoOrderParam*>::iterator order_it = orders.begin();

	document doc_test{};
	for (; order_it != orders.end(); order_it++)
	{
		doc_test << (*order_it)->getOrderField() << ((*order_it)->getType());
	}


	std::vector<std::string> project = query.getProjection();
	std::vector<std::string>::iterator project_it = project.begin();
	std::vector<std::string>::iterator project_end = project.end();

	document projection{};
	for (; project_it != project_end; project_it++)
	{
		projection << (*project_it) << 1;
	}

	auto opts = mongocxx::options::find{};
	opts.sort(doc_test.view());
	opts.projection(projection.view());
	mongocxx::cursor cursor = coll.find(doc.view(), opts);
	for (auto doc : cursor) {
		std::string t = bsoncxx::to_json(doc);
		Json* p = new Json{ t };
		MongoWrapper::query_result.push_back(p);
	}
}


-------------AFTER REFACTOR
Что было сделано:

1) Убраны все for циклы и заменены на std::for_each с lambda (СИ ЦС)
2) Создал отдельные методы для создания каждого типа документа, чтобы придерживаться SRP
3) Изменил имена переменные по более понятные (Ясный код)
4) Сделал аргументы функции константными (Ясный код, СИ)
5) ЦС понизилась с 7 до 1 метода find 

Какие минусы остались в решение:
1) слово auto. MongoCxx обильна namespace'ами и ухудшается чтение кода из-за подобного "bsoncxx::builder::basic::kvp" и так далее.
Можно использовать вместо auto using или typedef, но видел, как с++ программисты и auto использовали, и using. Не буду говорить, что auto -- лучший варинт.

2) Из-за слабой аритектуры, в методе createDocument остался вложенные if else и проверка на значение, которое не константная переменая. Если по спецификации значение
вдруг станет возможной -1 (идет проверка на конвертацию строки в вещественное), то вся логика поломается. То есть данный метод лучше бы полностью переписать, но
идей сильных не возникло.

3) Методы createDocument, createProjectionDocument, createSortDocument имеют одну логику -- пройти контейнер и выполнить lambda-выражение.
Можно было создать один метод createDocument(query, container, lambda), и передавать соответствующий container и lambda, но еще не имел опыта создания метода
с параметром-лямбдой-функцией.

-------------Code

void MongoWrapper::find(const MongoSelectQuery& query, const std::string& collection)
{
	auto coll = MongoWrapper::db[collection];

	//Creating document query
	auto query_doc = MongoWrapper::createDocument(query);

	//Setting projection of query
	auto projection = MongoWrapper::createProjectionDocument(query);

	//Creating mongo options
	auto sort_options = MongoWrapper::createSortDocument(query);
	auto opts = createOpts(sort_options);
	opts.projection(projection.view());

	mongocxx::cursor cursor = coll.find(query_doc.view(), opts);
	std::for_each(cursor.begin(), cursor.end(), [&](document& doc)->void
		{
			std::string t = bsoncxx::to_json(doc);
			Json* p = new Json{ t };
			MongoWrapper::query_result.push_back(p);
		});
}


mongocxx::options::find MongoWrapper::createOpts(document sort_options)
{
	auto opts = mongocxx::options::find{};
	opts.sort(sort_options.view());
	return opts;
}

document MongoWrapper::createDocument(MongoSelectQuery& query)
{
	document doc{};
	auto filters = query.getWhere();
	std::for_each(filters.begin(), filters.end(), [&doc](MongoWherePair* wherePair) -> void
		{
			doc << wherePair->getFirst() << open_document;
			double val = MongoWrapper::convert_to_double(wherePair->getSecond());
			if (val != -1.0)
				doc << wherePair->getWhereOperator() << val;
			else
				doc << wherePair->getWhereOperator() << wherePair->getSecond();
			doc << close_document;
		});
	return doc;
}

document MongoWrapper::createSortDocument(MongoSelectQuery& query)
{
	document sort_options{};
	std::vector<MongoOrderParam*> orderParams = query.getOrderField();
	std::for_each(orderParams.begin(), orderParams.end(), [&sort_options](MongoOrderParam* param)->void
		{
			sort_options << param->getOrderField() << (param->getType());
		});
	return sort_options;
}

document MongoWrapper::createProjectionDocument(MongoSelectQuery& query)
{
	document projection{};
	std::vector<std::string> project = query.getProjection();
	std::for_each(project.begin(), project.end(), [&projection](std::string& val)->void
		{
			projection << val << 1;
		});
	return projection;
}


-------------------------THIRD EXAMPLE-------------------------
Language: Java
-------------BEFORE REFACTOR:

Какие проблемы у данного кода:
1) Отсутствие SRP
2) Наличие if-else и вложенных if else
3) Наличие while и вложенных if-else
4) Проверка на null
5) ЦС равно 13
6) Несколько return

Данный метод реализует добавление елемента в отсортированных список. 
-------------Code

public void add(T value) {
		Node<T> nodeToAdd = new Node<T>(value);
		Node<T> current = this.head;
		if (this.head == null) {
			addInTail(nodeToAdd);
			max = this.head.value;
			min = this.head.value;
			count++;
			return;
		}
		if (compare(nodeToAdd.value, min) < 0 || compare(nodeToAdd.value, max) > 0) {
			if (_ascending) {
				if (compare(nodeToAdd.value, this.head.value) > 0)
					addInTail(nodeToAdd);
				else
					addInHead(nodeToAdd);
				min = this.head.value;
				max = this.tail.value;
			} else {
				if (compare(nodeToAdd.value, this.head.value) > 0)
					addInHead(nodeToAdd);
				else
					addInTail(nodeToAdd);
				min = this.tail.value;
				max = this.head.value;

			}
			count++;
			return;
		}

		if(!_ascending) {
			while (current.next != null) {
				if ((compare(nodeToAdd.value, current.value) < 0 && compare(nodeToAdd.value, current.next.value) > 0)
						|| (compare(current.value, nodeToAdd.value) == 0))
					break;
				current = current.next;
			}
		} else {
			while (current.next != null) {
				if ((compare(nodeToAdd.value, current.value) > 0 && compare(nodeToAdd.value, current.next.value) < 0)
						|| (compare(current.value, nodeToAdd.value) == 0))
					break;
				current = current.next;
			}
		}
		
		insertAfter(current, nodeToAdd);
		count++;
	}
	
-------------AFTER REFACTOR:


Тут приложена укороченная версия. Полная версия лежит тут: https://github.com/eduAlexandrPirogov/clearing_refactoring_code/blob/main/OrderedListAddMethodRefactor.java

Что было сделано:

1) Убраны проверки на null (СИ ЦС)
2) Уменьшил количество вложенных if-else (узнал, что в Java тернарный оператор должен быть присвоен) (СИ ЦС)
3) Декомпозировал функцию add на мелкие
4) Добавил класс NodesOrder. Потенциально позволяет добавлять в список разлиные виды сортировок (например, сортировка по количеству символов в строке)
5) Cнизил сложность с 13 до 5

Какие минусы остались:
1) Наличие null в нодах
2) Наличие if-else вложенных. Проблема решалась намного проще, если бы тернарный оператор работал как в С++, но имеем, что имеем. 
3) Не лучшая реализация DummyNode. Можно сделать проще, нарушаю KISS, DRY. 
4) Также можно подумать об реализации HeadNode, TailNode, и добавить методы удаления/добавления в эти классы. Соответственно,
они будут полиморфно вызывать свои методы, что избавит нас от if-else. 

-------------Code

//Создаем классы Node, ValuableNode, EmptyNode, дабы убрать проверку null
class Node<T> {

	public Node<T> next, prev;
	public T value;

	public Node() {
		value = null;
		next = null;
		prev = null;
	}

	public Node(T _value) {
		value = _value;
		next = null;
		prev = null;
	}

}

class ValueableNode<T> extends Node<T> {

	public ValueableNode(T _value) {
		super(_value);
		this.next = null;
		this.prev = null;
		// TODO Auto-generated constructor stub
	}

}

class EmptyNode<T> extends Node<T> {

	public EmptyNode() {
		super(null);
		this.next = null;
		this.prev = null;
	}



	public EmptyNode(T _value) {
		super(_value);
		// TODO Auto-generated constructor stub
		this.next = null;
		this.prev = null;
	}

}

//Создаем иерарию классов, которая отвечает за способ сортировки 
//Поскольку, если на понадобится особая сортировка (сравниваем, например, по количеству символов в строке), то 
//нам нужно лишь указать способ сортировку, а соответствующий экземпляр создаться внутри класса OrderedList

abstract class NodesOrder<T extends Comparable<T>> implements Comparator<T> {

	public Node<T> head, tail;
	public int count;
	public T max, min;

	@Override
	public int compare(T v1, T v2) {
		/.../
	}

	public abstract void add(T value);

	public abstract void addInHead(ValueableNode<T> _item);

	public abstract void addInTail(ValueableNode<T> _item);

	public abstract void delete(T val);

	public Node<T> find(T val) {
		/.../
	}

	public void insertAfter(ValueableNode<T> _nodeAfter, ValueableNode<T> _nodeToInsert) {
		/.../
	}

	public void clear(boolean asc) {
		/.../
	}

	public int count() {
		return count;
	}

	public abstract ArrayList<Node<T>> getAll();

}

class DescNodesOrder<T extends Comparable<T>> extends NodesOrder<T> {

	DescNodesOrder(int count) {
		count = 0;
		head = new EmptyNode<T>();
		tail = new EmptyNode<T>();
	}

	
	public void add(T value) {
		ValueableNode<T> nodeToAdd = new ValueableNode<T>(value);
		count++;
		// Ternary operator would be usefull here
		//Попытка избавиться от else.
		if (this.head instanceof EmptyNode) {
			addFirstHead(nodeToAdd);
			return;
		}
		addAfterHead(nodeToAdd);
	}
	

	private void addFirstHead(ValueableNode<T> nodeToAdd) {
		addInTail(nodeToAdd);
		max = this.head.value;
		min = this.head.value;
	}
	
	//Наличие else и вложенных if-else
	private void addAfterHead(ValueableNode<T> nodeToAdd) {
		Node<T> current = this.head;
		
		//ternary operator would be great here
		if((compare(nodeToAdd.value, min) < 0 || compare(nodeToAdd.value, max) > 0))
		{
			if (compare(nodeToAdd.value, this.head.value) > 0)
				addInHead(nodeToAdd);
			else
				addInTail(nodeToAdd);
		} else {
			current = recDescSearch(nodeToAdd.value, current, nodeToAdd);
			insertAfter((ValueableNode) current, nodeToAdd);

		}
		
		min = this.head.value;
		max = this.tail.value;
	}
	
	//Убрал цикл while и проверку на null
	private Node<T> recDescSearch(T value, Node<T> current, Node<T> nodeToAdd) {
		if (current.next instanceof EmptyNode
				|| (compare(nodeToAdd.value, current.value) > 0 && compare(nodeToAdd.value, current.next.value) < 0)
				|| (compare(current.value, nodeToAdd.value) == 0))
			return current;
		current = current.next;
		return recDescSearch(value, current, nodeToAdd);

	}

	@Override
	public void addInHead(ValueableNode<T> _item) {
		/..../
	}

	public void addInTail(ValueableNode<T> _item) {
		/..../
	}

	public Node<T> find(T val) {
		/..../
	}

	public void delete(T val) {
		/..../
	}

	public void clear(boolean asc) {
		/..../
	}

	public int count() {
		return count;
	}

	public ArrayList<Node<T>> getAll() {
		/..../
	}
}

class AscNodesOrder<T extends Comparable<T>> extends NodesOrder<T> {

	AscNodesOrder(int count) {
		count = 0;
		head = new EmptyNode<T>();
		tail = new EmptyNode<T>();
	}

	public int compare(T v1, T v2) {
		return (v1.compareTo(v2));
	}

	// complex 13
	public void add(T value) {
		ValueableNode<T> nodeToAdd = new ValueableNode<T>(value);
		Node<T> current = this.head;
		/.../
	}
	
	/..../

}

public class OrderedList<T extends Comparable<T>> implements Comparator<T> {

	NodesOrder<T> order;

	public OrderedList(boolean asc) {
		order = asc ? new AscNodesOrder<T>(0) : new DescNodesOrder<T>(0);

	}
	
	boolean getAscenging() {
		return order instanceof AscNodesOrder;
	}

	public int compare(T v1, T v2) {
		return (v1.compareTo(v2));
	}

	// complex 13
	public void add(T value) {
		//Subtype polymorhysm
		order.add(value);
	}

	public void insertAfter(ValueableNode<T> _nodeAfter, ValueableNode<T> _nodeToInsert) {
		order.insertAfter(_nodeAfter, _nodeToInsert);
	}

	/..../
}

